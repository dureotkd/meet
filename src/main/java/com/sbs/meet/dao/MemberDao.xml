<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sbs.meet.dao.MemberDao">

	<insert id="join" useGeneratedKeys="true" keyProperty="id">
		INSERT
		INTO member
		SET regDate = NOW(),
		updateDate = NOW(),
		mailStatus = 0,
		email = #{email},
		name = #{name},
		nickname = #{nickname},
		loginPw =
		#{loginPw},
		level = 1,
		introduce = "안녕하세요 처음뵙겠습니다.",
		delStatus = 0
	</insert>
	
	<select id="getMe" resultMap="member">
		SELECT * FROM member
		WHERE
		id = #{id}
	</select>

	<select id="getNicknameDupCount" resultType="boolean">
		SELECT COUNT(*)
		FROM
		member
		WHERE nickname = #{nickname}
	</select>

	<select id="getMemberByEmail" resultType="Member">
		SELECT * FROM member
		WHERE email = #{email}
	</select>

	<select id="getMemberById" resultMap="member">
		SELECT * FROM member
		WHERE
		id = #{id}
	</select>

	<update id="doModifyPrivate">
		UPDATE member
		<set>
			updateDate = NOW(),
			<if test="loginPw != null">loginPw = #{loginPw},</if>
		</set>
		WHERE id = #{id}
	</update>

	<select id="doFindLoginId" resultType="Member">
		SELECT * FROM member
		WHERE
		nickname = #{nickname}
		AND name = #{name}
	</select>

	<select id="getEmailDupCount" resultType="boolean">
		SELECT COUNT(*)
		FROM
		member
		WHERE email = #{email}
	</select>

	<select id="getMemberByEmailForFindLoginPw" resultType="Member">
		SELECT *
		FROM member
		WHERE email = #{email}
	</select>

	<update id="doUpdateTempLoginPw">
		UPDATE member
		SET updateDate = NOW(),
		loginPw =
		#{loginPw}
		WHERE email = #{email}
	</update>

	<update id="doMyInfoEdit">
		UPDATE member
		SET name = #{name},
		email = #{email},
		nickname = #{nickname},
		introduce = #{introduce}
		WHERE
		id = #{id}
	</update>

	<update id="doMyInfoEdit2">
		UPDATE member
		SET name = #{name},
		email = #{email},
		nickname = #{nickname},
		introduce = #{introduce}
		WHERE
		id = #{id}
	</update>

	<select id="getArticleCount" resultType="int">
		SELECT COUNT(*) AS
		cnt
		FROM article
		WHERE memberId = #{memberId}
		AND displayStatus = 1
	</select>

	<update id="actionUpdetaSessionKey">
		UPDATE member
		SET sessionKey = #{sessionId},
		sessionLimit = #{sessionLimit}
		WHERE email =#{email}
	</update>

	<select id="checkUseWithSessionKey" resultType="Member">
		SELECT * FROM
		member
		WHERE sessionKey = #{sessionId}
		AND sessionLimit > NOW()
	</select>

	<select id="getUserAvatarImg" resultType="File">
		SELECT * FROM file
		WHERE relTypeCode = 'member'
		AND relId = #{memberId}
	</select>

	<update id="doUpdateLevel5">
		UPDATE member
		SET level = 5
		WHERE id
		= #{memberId}
	</update>

	<update id="doUpdateLevel10">
		UPDATE member
		SET level = 10
		WHERE
		id
		= #{memberId}
	</update>

	<select id="getAllMember" resultMap="member">
		SELECT * FROM member
		ORDER BY
		id DESC
	</select>

	<select id="getMemberBySearch" resultMap="member">
		SELECT * FROM member
		WHERE nickname LIKE CONCAT('%',#{searchKeyword},'%')
	</select>

	<select id="getMsgNoticeCount" resultType="int">
		SELECT COUNT(*) AS
		cnt
		FROM message
		WHERE toId = #{loginedMemberId}
		AND readStatus = 0
	</select>

	<select id="getLikePointCount" resultType="int">
		SELECT COUNT(*) AS
		cnt
		FROM articleLike
		WHERE articleId = #{id}
		AND readStatus = 0
	</select>

	<select id="getRepliesCount" resultType="int">
		SELECT COUNT(*),
		A.body
		AS extra__body
		FROM articleReply AS AR
		INNER JOIN article AS A
		ON
		AR.articleId = A.id
		WHERE A.memberId = #{loginedMemberId}
		AND
		AR.memberId != #{loginedMemberId}
		AND AR.displayStatus = 1
		AND
		AR.readStatus = 0
	</select>

	<select id="getMyLikePoint" resultType="int">
		SELECT COUNT(*),
		A.body AS
		extra__body
		FROM articleLike AS AL
		INNER JOIN article AS A
		ON
		AL.articleId = A.id
		WHERE A.memberId = #{loginedMemberId}
		AND
		AL.readStatus = 0
	</select>

	<select id="getForPrintNotFollow" resultMap="member">
		SELECT M.*,
		M.nickname AS extra__writer
		FROM `member` AS M
		WHERE M.id !=
		#{loginedMemberId}
		AND M.delStatus = 0
		ORDER BY M.id DESC
		LIMIT 5;
	</select>

	<select id="getRepliesCountByMe" resultType="int">
		SELECT COUNT(*),
		A.body AS extra__body
		FROM articleReply AS AR
		INNER JOIN article AS A
		ON
		AR.articleId = A.id
		WHERE A.memberId = #{loginedMemberId}
		AND
		AR.memberId = #{loginedMemberId}
	</select>

	<select id="isNeedToChangePwPass3Months" resultType="String">
	<![CDATA[ 
		SELECT * FROM `member`
		WHERE id = #{loginedMemberId}
		AND delStatus = 0
		AND updateDate <= DATE_ADD(NOW(), INTERVAL -3 MONTH);
	]]>
	</select>

	<update id="updateActReadStatus">
		UPDATE articleLike AS AL
		INNER JOIN article AS A
		ON
		AL.articleId = A.id
		INNER JOIN member AS M
		ON M.id = AL.memberId
		SET
		AL.readStatus = 1
		WHERE A.memberId = #{loginedMemberId}
	</update>

	<update id="updateActReadStatusInReply">
		UPDATE articleReply AS AR
		INNER JOIN article AS A
		ON
		AR.articleId = A.id
		INNER JOIN member AS M
		ON M.id = AR.memberId
		SET
		AR.readStatus = 1
		WHERE A.memberId = #{loginedMemberId}
	</update>

	<insert id="doActionFollow">
		INSERT INTO friend
		SET regDate = NOW(),
		followId =
		#{followId},
		followerId = #{followerId},
		readStatus = 0,
		displayStatus = 1
	</insert>

	<delete id="doDeleteFollow">
		DELETE FROM friend
		WHERE followId = #{followId}
		AND
		followerId = #{followerId}
	</delete>

	<select id="getMyFollowerCount" resultType="int">
		SELECT COUNT(*) AS
		cnt
		FROM friend
		WHERE followId = #{loginedMemberId}
		AND readStatus = 0
	</select>

	<select id="getForPrintMyFollow" resultMap="friend">
		SELECT F.*,
		M.nickname AS extra__writer
		FROM friend AS F
		INNER JOIN `member` AS M
		ON
		M.id = F.followerId
		WHERE F.followId = #{loginedMemberId}
		AND
		F.readStatus = 0
	</select>

	<update id="updateActReadStatusInFollow">
		UPDATE friend
		SET readStatus = 1
		WHERE followId =
		#{loginedMemberId}
	</update>

	<select id="getFollowCount" resultType="int">
		SELECT COUNT(*) AS cnt
		FROM friend WHERE followId = #{memberId}
	</select>

	<select id="getFollowerCount" resultType="int">
		SELECT COUNT(*) AS cnt
		FROM friend WHERE followerId = #{memberId}
	</select>

	<select id="getFollowingConfirm" resultType="int">
		SELECT COUNT(*) AS
		cnt
		FROM friend WHERE followerId = #{loginedMemberId}
		AND followId =
		#{memberId}
	</select>

	<select id="getFollowCross" resultType="int">
		SELECT COUNT(*) AS cnt
		FROM friend WHERE followerId = #{memberId}
		AND followId =
		#{loginedMemberId}
	</select>

	<select id="getBeforeFollowCount" resultType="int">
	<![CDATA[
	SELECT COUNT(*),
	A.body AS extra__body
	FROM friend AS F
	INNER JOIN article AS A
	ON A.id = F.id
	WHERE F.followId = #{memberId}
	AND  
	(SELECT MAX(regDate) FROM article WHERE memberId = #{memberId}) < 
	(SELECT F.regDate WHERE followId = #{memberId})
	]]>
	</select>

	<select id="getTotalReplyCount" resultType="int">
		SELECT COUNT(*),
		A.body AS extra__body
		FROM articleReply AS AR
		INNER JOIN article AS A
		ON
		A.id = AR.articleId
		WHERE A.displayStatus = 1
		AND AR.displayStatus = 1
		AND
		A.memberId = #{memberId}
	</select>

	<select id="getTotalLikeCount" resultType="int">
		SELECT
		IFNULL(SUM(POINT), 0) AS extra__point
		FROM articleLike AS AL
		INNER JOIN
		article AS A
		ON A.id = AL.articleId
		WHERE A.displayStatus = 1
		AND
		A.memberId = #{memberId}
	</select>

	<select id="getArticleKingLikeCount" resultType="ArticleLike">
		SELECT * FROM
		articleLike
		WHERE articleId = #{articleId}
	</select>

	<select id="getArticleCountBeforeDay" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		AS cnt
		FROM article
		WHERE memberId = #{memberId}
		AND DATE_SUB(NOW(), INTERVAL 1 DAY) <= regDate
		]]>
	</select>

	<select id="getArticleCountBeforeWeek" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		AS cnt
		FROM article
		WHERE memberId = #{memberId}
		AND DATE_SUB(NOW(), INTERVAL 7 DAY) <= regDate
		]]>
	</select>

	<select id="getArticleCountBeforeMonth" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		AS cnt
		FROM article
		WHERE memberId = #{memberId}
		AND DATE_SUB(NOW(), INTERVAL 1 MONTH) <= regDate
		]]>
	</select>

	<select id="getMemberByOldFriend" resultMap="friend">
		SELECT F.*,
		M.nickname AS extra__writer
		FROM friend AS F
		INNER JOIN `member` AS M
		ON
		M.id = F.followerId
		WHERE F.followId = #{memberId}
		ORDER BY F.regDate
		ASC
		LIMIT 3;
	</select>

	<update id="disAbleAccount">
		UPDATE article,articleReply,`member` AS M
		INNER JOIN
		`article` AS A
		ON M.id = A.memberId
		INNER JOIN articleReply AS AR
		ON M.id = AR.memberId
		SET
		M.delStatus = 1,A.displayStatus=0,AR.displayStatus=0
		WHERE M.id = #{memberId}
	</update>

	<update id="ableAccount">
		UPDATE article,articleReply,`member`
		INNER JOIN
		`article` AS A
		ON member.id =
		A.memberId
		INNER JOIN articleReply AS AR
		ON
		member.id = AR.memberId
		SET
		A.displayStatus = 1,
		AR.displayStatus = 1,
		`member`.delStatus = 0
		WHERE
		member.id = #{memberId}
	</update>

	<update id="doChangePassword">
		UPDATE member
		SET updateDate = NOW(),
		loginPw =
		#{loginPw}
		WHERE id = #{memberId}
	</update>



	<resultMap type="Friend" id="friend">
		<id property="id" column="id" />
		<id property="regDate" column="regDate" />
		<id property="followId" column="followId" />
		<id property="followerId" column="followerId" />
		<id property="readStatus" column="readStatus" />
		<id property="displayStatus" column="displayStatus"></id>
		<association property="extra" javaType="map">
			<id property="writer" column="extra__writer" />
		</association>
	</resultMap>


	<resultMap type="Member" id="member">
		<id property="id" column="id" />
		<id property="regDate" column="regDate" />
		<id property="updateDate" column="updateDate" />
		<id property="email" column="email" />
		<id property="name" column="name" />
		<id property="loginPw" column="loginPw"></id>
		<id property="nickname" column="nickname" />
		<id property="level" column="level"></id>
		<id property="delStatus" column="delStatus"></id>
		<id property="displayStatus" column="displayStatus"></id>
		<id property="introduce" column="introduce" />
		<association property="extra" javaType="map">
			<id property="writer" column="extra__writer" />
		</association>
	</resultMap>

</mapper>
